{
  "name": "eslint-config-scratch",
  "version": "3.1.0",
  "description": "Shareable ESLint config for Scratch",
  "main": "index.js",
  "scripts": {
    "test": "eslint .",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post"
  },
  "eslintConfig": {
    "extends": "./index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/LLK/eslint-config-scratch.git"
  },
  "author": {
    "name": "Massachusetts Institute of Technology"
  },
  "license": "BSD-3-Clause",
  "bugs": {
    "url": "https://github.com/LLK/eslint-config-scratch/issues"
  },
  "homepage": "https://github.com/LLK/eslint-config-scratch#readme",
  "keywords": [
    "eslint",
    "eslintconfig",
    "scratch"
  ],
  "optionalDependencies": {
    "eslint-plugin-react": "6.x"
  },
  "peerDependencies": {
    "babel-eslint": "7.x",
    "eslint": "3.x"
  },
  "devDependencies": {
    "babel-eslint": "^7.0.0",
    "cz-conventional-changelog": "1.2.0",
    "eslint": "^3.8.1",
    "semantic-release": "^4.3.5"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "readme": "# Scratch ESLint config\n#### eslint-config-scratch defines the eslint rules used for Scratch Javascript projects\n\n## Installation\nInstall the config along with its peer dependencies, eslint and babel-eslint.\n```bash\nnpm install -D eslint-config-scratch eslint@3 babel-eslint@7\n```\n\nIf you're using the React config, also install the dependency for that\n```bash\nnpm install -D eslint-plugin-react@6\n```\n\n## Usage\nThe configuration is split up into several modules:\n* `scratch`: The base configuration. Always extend this.\n* `scratch/node`: Rules for node, e.g., server-side code, tests, and scripts\n* `scratch/es6`: Rules for ES6, for use when you're transpiling with webpack\n* `scratch/react`: Rules for React projects\n\nUsually web projects have a mix of node and web environment files. To lint both\nwith the appropriate rules, set up a base `.eslintrc.js` with the rules for node\nand then override the node configuration in `src` (where web code usually lives).\nE.g., with a file structure like this:\n```\nscratch-project\n- .eslintrc.js\n- package.json\n- src\n  - .eslintrc.js\n  - index.js\n```\nYour config files should be set up like\n```javascript\n// scratch-project/.eslintrc.js\nmodule.exports = {\n    extends: ['scratch', 'scratch/node'],\n    env: {\n        node: true\n    }\n};\n\n// scratch-project/src/.eslintrc.js\nmodule.exports = {\n    root: true,\n    extends: ['scratch', 'scratch/es6', 'scratch/react'],\n    env: {\n        browser: true\n    }\n};\n```\nThis will set up all the files in the project for linting as Node.js by default,\nexcept for those in `src/`, which will be linted as ES6 and React files.\n\nIf you're linting React, also make sure your lint script lints `.jsx` files:\n```json\n\"scripts\": {\n    \"lint\": \"eslint . --ext .js,.jsx\"\n}\n```\n\n## Committing\nThis project uses [semantic release](https://github.com/semantic-release/semantic-release)\nto ensure version bumps follow semver so that projects using the config don't\nbreak unexpectedly.\n\nIn order to automatically determine the type of version bump necessary, semantic\nrelease expects commit messages to be formatted following\n[conventional-changelog](https://github.com/bcoe/conventional-changelog-standard/blob/master/convention.md).\n```\n<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n```\n\n`subject` and `body` are your familiar commit subject and body. `footer` is\nwhere you would include `BREAKING CHANGE` and `ISSUES FIXED` sections if\napplicable.\n\n`type` is one of:\n* `fix`: A bug fix **Causes a patch release (0.0.x)**\n* `feat`: A new feature **Causes a minor release (0.x.0)**\n* `docs`: Documentation only changes\n* `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\n* `refactor`: A code change that neither fixes a bug nor adds a feature\n* `perf`: A code change that improves performance **May or may not cause a minor release. It's not clear.**\n* `test`: Adding missing tests or correcting existing tests\n* `ci`: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)\n* `chore`: Other changes that don't modify src or test files\n* `revert`: Reverts a previous commit\n\nUse the [commitizen CLI](https://github.com/commitizen/cz-cli) to make commits\nformatted in this way:\n\n```bash\nnpm install -g commitizen\nnpm install\n```\n\nNow you're ready to make commits using `git cz`.\n\n## Breaking changes\nIf you're committing a change that makes the linter more strict, or will\notherwise require changes to existing code, ensure your commit specifies a\nbreaking change.  In your commit body, prefix the changes with \"BREAKING CHANGE: \"\nThis will cause a major version bump so downstream projects must choose to upgrade\nthe config and will not break the build unexpectedly.\n",
  "readmeFilename": "README.md",
  "dependencies": {
    "eslint-plugin-react": "6.x"
  },
  "_id": "eslint-config-scratch@3.1.0",
  "dist": {
    "shasum": "41d584e7339662c64f466896b0d9ea0416e90c16"
  },
  "_from": "eslint-config-scratch@^3.1.0",
  "_resolved": "https://registry.npmjs.org/eslint-config-scratch/-/eslint-config-scratch-3.1.0.tgz"
}
